Question: Where are we accounting for the fact that if we sample from the BRDF, there's a chance we could miss completely?
		  In other words, don't we need to divide by the pdf of having hit a particular point and not missed? 

Answer: This would be a problem only if we were sampling wrt all the surfaces on the scene (or only solid angles corresponding to those surfaces),
		but we're not. Instead, we used a trick to transform that integral over an awkward domain of integration into one over all possible solid
		angles, and introduce a "visibility term" into the integrand to account for this. So when we draw a sample wrt the BSDF, this doesn't introduce bias!
		All it does is mess with the expected value and variance of the POPULATION (i.e. brings down the mean and variance of the true radiance at a point in
		a direction, than if it we integrated over the awkward domains). The estimator, however, remains unbiased.


radiance = 0

for i in {1, ... , n} {
	throughput = 1

	Shoot ray from eye through random location on pixel (e.g. stratified sampling).   // This is for generating random 0-bounce paths, but gives us anti-aliasing too.
	bounce = 0

	while True {
		Find intersection of ray in scene. 

		if intersected {
			if we hit light source {
				if bounce == 0 {
					radiance = light_source.Le;   // Why no division by probability? Because there's no Monte-Carlo sampling required here if this is a light. We  								  // just get the light emitted from there directly. 
				}

				break;  // Why? Does this introduce bias if it's not the first bounce? Because this ray, though it doesn't hit anything, is a legit sample from H^2, 		 // except the integrand is simply 0 in this case as the argument of the giant indicator function is "false", because evidently one of the 
			
			}

			else hit diffuse object {
				1. Sample direct light and DONT FORGET VISIBILITY TERM (i.e. check if it's in shadow), and recall whether or not it's in shadow doesn't impact the pdf, and store it's value and the pdf wrt solid angle of the value (which is pdf_surface_area * dist^2 / cos(theta')). We need to convert it because
                we sampled with respect to the area, but we're still integrating with respect to solid angle.
				2. radiance += direct_light * rho(omega_in = direct_light_dir, omega_out = -ray_dir) * absdot(omega_in=direct_light_dir, normal) * throughput / direct_light_pdf;
				3. New raydir = new cosine weighted sample. Store pdf of that sample, which is just cosine(theta) / pi.
				4. throughput *= rho(omega_in = new_ray_dir, omega_out = -old_ray_dir) * absdot(omega_in=new_ray_dir, normal) / cosine_pdf;
				5. Define some probability of death q proportional to low-ness of throughput value. 
				6. If rng() > q {
						break;
				   }
				   Else {
				   		throughput /= 1-q;
				   }
			}

			bounce += 1;
			continue;

		}

		break;  // Also does not introduce bias, since the ray was still a legit sample from H^2, but the integrand happens to have evaluated to 0.
	}

}

radiance /= n;





#define PI 3.1415926535897932384626433832795028841971
#define INF 100000.0

float rho = 50.0;  // dist from world origin to eye
float theta = -PI / 2.0;
float phi = PI / 2.0;
float focus = 35.0;  // must be less than rho!
float s_width = 10.0;  // screen width, in the imaginary world (not actual screen)


// Helper functions
float rng(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// Intersection Point
struct IntersectionPoint {
    float t;
    vec3 pos;
    vec3 nor;
    bool on_light;  // true iff point lies on area-light
};

// Ray
struct Ray {
    vec3 origin;
    vec3 dir;
};



// Primitive Shapes
struct Sphere {
    float radius;
    vec3 center;
};

struct Triangle {
    vec3 verts[3];  // Oriented counter-clockwise.
    bool is_light;  // true iff it's an area-light
};


// Intersect with triangle 
IntersectionPoint intersect_triangle(Triangle tri, Ray ray) {
    // Triangle Data
    vec3 v0 = tri.verts[0];
    vec3 v1 = tri.verts[1];
    vec3 v2 = tri.verts[2];
    vec3 n = normalize(cross(v1 - v0, v2 - v0));

    // Find intersection...
    IntersectionPoint isect;
    isect.t = INF;

    // Triangle parallel with ray
    if (dot(n, ray.dir) == 0.0) {
        return isect;
    }

    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);
    // Triangle behind the origin
    if (t <= 0.0) {
        return isect;
    }

    // In-out test
    vec3 point = ray.origin + (t * ray.dir);
    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;
    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;
    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;
    if ((b0 && b1) && b2) {
        isect.t = t;
        isect.pos = point;
        isect.nor = n;
    }
    return isect;
}

// Intersect ray with sphere
IntersectionPoint intersect_sphere(Sphere s, Ray ray) {
    // Sphere data
    vec3 center = s.center;
    float radius = s.radius;

    // Find intersection point...
    IntersectionPoint point;
    point.t = INF;

    // Build quadratic
    float A = dot(ray.dir, ray.dir);
    float B = 2.0 * dot(ray.dir, ray.origin - center);
    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);
    float disc = (B * B) - (4.0 * A * C);

    // Solve quadratic
    if (disc < 0.0) {
        return point;
    }
    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));
    if (t >= 0.0) {
        point.t = t;
        point.pos = ray.origin + (t * ray.dir);
        point.nor = normalize(point.pos - center);
    }
    return point;
}


// Intersect Scene 1 — Sphere + Triangle scene
IntersectionPoint intersect_scene1(Ray ray) {
    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.
    Triangle tri;
    float halfside = 10.0 / 2.0;
    tri.verts[0] = vec3(0.0, -halfside, -halfside);
    tri.verts[1] = vec3(0.0, halfside, -halfside);
    tri.verts[2] = vec3(0.0, 0, halfside);
    
    // Sphere of radius 7 centered above triangle.
    Sphere s;
    s.center = vec3(0.0, 0.0, 9.0);
    s.radius = 7.0;
    
    // Intersect ray with both.
    IntersectionPoint isect_tri = intersect_triangle(tri, ray);
    IntersectionPoint isect_sphere = intersect_sphere(s, ray);
    
    if (isect_tri.t < isect_sphere.t) {
        return isect_tri;
    }
    
    return isect_sphere;
}


SHADER TOY (NEW BUFFA)
#define PI 3.1415926535897932384626433832795028841971
#define INF 100000.0

float rho = 50.0;  // dist from world origin to eye
float theta = -PI / 2.0;
float phi = PI / 2.0;
float focus = 35.0;  // must be less than rho!
float s_width = 10.0;  // screen width, in the imaginary world (not actual screen)


// Helper functions
float rng(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// Intersection Point
struct IntersectionPoint {
    float t;
    vec3 pos;
    vec3 nor;
    bool on_light;  // true iff point lies on area-light
};

// Ray
struct Ray {
    vec3 origin;
    vec3 dir;
};


// Primitive Shapes
struct Sphere {
    float radius;
    vec3 center;
};

struct Triangle {
    vec3 verts[3];  // Oriented counter-clockwise.
    bool is_light;  // true iff it's an area-light
};

// Scene
struct Scene {
    int n_tris;
    Triangle tris[100];
    int n_spheres;
    Sphere spheres[100];
    
    // NOTE: INDEX 0 CANNOT BE A LIGHT!
    int t_lights[10];  // list of indices in tris array corresponding to lights
    int s_lights[10];  // list of indices in tris array corresponding to lights
    
};


// Intersect with triangle 
IntersectionPoint intersect_triangle(Triangle tri, Ray ray) {
    // Triangle Data
    vec3 v0 = tri.verts[0];
    vec3 v1 = tri.verts[1];
    vec3 v2 = tri.verts[2];
    vec3 n = normalize(cross(v1 - v0, v2 - v0));

    // Find intersection...
    IntersectionPoint isect;
    isect.t = INF;

    // Triangle parallel with ray
    if (dot(n, ray.dir) == 0.0) {
        return isect;
    }

    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);
    // Triangle behind the origin
    if (t <= 0.0) {
        return isect;
    }

    // In-out test
    vec3 point = ray.origin + (t * ray.dir);
    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;
    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;
    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;
    if ((b0 && b1) && b2) {
        isect.t = t;
        isect.pos = point;
        isect.nor = n;
    }
    return isect;
}

// Intersect ray with sphere
IntersectionPoint intersect_sphere(Sphere s, Ray ray) {
    // Sphere data
    vec3 center = s.center;
    float radius = s.radius;

    // Find intersection point...
    IntersectionPoint point;
    point.t = INF;

    // Build quadratic
    float A = dot(ray.dir, ray.dir);
    float B = 2.0 * dot(ray.dir, ray.origin - center);
    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);
    float disc = (B * B) - (4.0 * A * C);

    // Solve quadratic
    if (disc < 0.0) {
        return point;
    }
    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));
    if (t >= 0.0) {
        point.t = t;
        point.pos = ray.origin + (t * ray.dir);
        point.nor = normalize(point.pos - center);
    }
    return point;
}


// Create Scene 2 — Box with Area Light + 2 Spheres
Scene scene2() {
    Scene scene;
    
    // Box parameters. It opens up on the negative y-axis. 'h' below stands for 'half'.
    float hx = 30.0 / 2.0;
    float hy = 30.0 / 2.0;
    float hz = 15.0 / 2.0;
    

    // Box will be a collection of triangles.
    // Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ))
    const int n_tris = (5 + 1) * 2;
    scene.n_tris = n_tris;
    const float p = 0.3;  // percentage smaller area-light is compared to ceiling.
    const float dz = -0.1; // z-displacement from ceiling to area light
    Triangle tris[n_tris] = Triangle[n_tris](
        // Floor
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(hx, -hy, -hz), vec3(-hx, hy, -hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, -hz), vec3(-hx, hy, -hz), vec3(hx, -hy, -hz) ), false),
        // Back Wall
        Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, hy, -hz) ), false),
        // Left Wall
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(-hx, hy, -hz), vec3(-hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(-hx, hy, hz), vec3(-hx, -hy, hz), vec3(-hx, hy, -hz) ), false),
        // Right Wall
        Triangle(vec3[3]( vec3(hx, -hy, -hz), vec3(hx, hy, -hz), vec3(hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(hx, -hy, hz), vec3(hx, hy, -hz) ), false),
        // Ceiling
        Triangle(vec3[3]( vec3(-hx, -hy, hz), vec3(hx, -hy, hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, -hy, hz) ), false),
        
        // Area Light
        Triangle(vec3[3]( vec3(-p*hx, -p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz) ), true),
        Triangle(vec3[3]( vec3(p*hx, p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz) ), true)
        
    );
    for (int i=0; i<n_tris; ++i) {
        scene.tris[i] = tris[i];
    }
    
    // Throw in a couple of spheres too
    const float radius = 4.0;
    const int n_spheres = 2;
    scene.n_spheres = n_spheres;
    Sphere spheres[n_spheres] = Sphere[n_spheres](
        Sphere(radius, vec3(0.4 * hx, -0.2 * hy, -hz + radius)),
        Sphere(radius, vec3(-0.4 * hx, 0.5 * hy, -hz + radius))
    );
    for (int i=0; i<n_spheres; ++i) {
        scene.spheres[i] = spheres[i];
    }
    
    // Indicate to the scene which primitives are lights (only 2 triangles in this case)
    scene.t_lights[0] = n_tris-1;
    scene.t_lights[1] = n_tris-2;
    
    return scene;
}


// Generic intersection method of ray with scene
IntersectionPoint intersect_scene(Scene scene, Ray ray) {
    IntersectionPoint minpoint; 
    minpoint.t = INF;
    
    for (int i=0; i<scene.n_tris; ++i) {
        IntersectionPoint isect = intersect_triangle(scene.tris[i], ray);
        if (isect.t < minpoint.t) {
            //minpoint = isect;
            //minpoint.on_light = scene.tris[i].is_light;
        }
    }
    
    // Triangle intersection
    return minpoint;
}


// DEPRECATED: Intersect Scene 1 — Sphere + Triangle scene
IntersectionPoint intersect_scene1(Ray ray) {
    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.
    Triangle tri;
    float halfside = 10.0 / 2.0;
    tri.verts[0] = vec3(0.0, -halfside, -halfside);
    tri.verts[1] = vec3(0.0, halfside, -halfside);
    tri.verts[2] = vec3(0.0, 0, halfside);
    
    // Sphere of radius 7 centered above triangle.
    Sphere s;
    s.center = vec3(0.0, 0.0, 9.0);
    s.radius = 7.0;
    
    // Intersect ray with both.
    IntersectionPoint isect_tri = intersect_triangle(tri, ray);
    IntersectionPoint isect_sphere = intersect_sphere(s, ray);
    
    if (isect_tri.t < isect_sphere.t) {
        return isect_tri;
    }
    
    return isect_sphere;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Dynamic constants
    vec2 uv = fragCoord/iResolution.xy;
    float AR = iResolution.x / iResolution.y;
    float inv_AR = 1.0 / AR;
    
    // Get camera pos (in range [-1,1]^2) from mouse
    vec2 mouseUV = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);
    theta -= mouseUV.x * 2.0;
    phi += mouseUV.y * 2.0;
    

    // Point light (the actual light for Blinn-Phong in this demo)
    vec3 light_pos = 20.0 * vec3(0.0, -1.0, 0.0);
    vec3 light_col = vec3(1.0, 0.0, 0.0);
    vec3 ambient_col = vec3(1.0, 0.0, 0.0);

    // Set eye position and virtual screen dimensions
    vec3 eye = rho * vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    float s_height = s_width * inv_AR;
    
    // Turn uv from [0,1]^2 range to [-1,1]^2 range (with y still up)
    vec2 uv_prime = (uv * 2.0) - vec2(1.0);
    
    // Spherical unit vectors
    vec3 theta_hat = vec3(-sin(theta), cos(theta), 0);
    vec3 phi_hat = -vec3(cos(phi) * cos(theta), cos(phi) * sin(theta), -sin(phi));
    vec3 point = (eye * (focus / rho)) + ((uv_prime.x * (s_width / 2.0) * theta_hat) + (uv_prime.y * (s_height / 2.0) * phi_hat));
    
    // Scene to use
    Scene s = scene2();
    
    // Single ray (per pixel)
    Ray r;
    r.dir = normalize(point - eye);
    r.origin = eye;
    
    IntersectionPoint isect = intersect_scene(s, r);
    vec3 rgb = vec3(0.0);
    if (isect.on_light) {rgb = vec3(1.0);}
    else if (isect.t != INF) {
        vec3 l = normalize(light_pos - isect.pos);
        vec3 v = normalize(-r.dir);
        vec3 h = normalize(l + v);
        vec3 n = isect.nor;

        float ambient = 0.6;
        float diffuse = max(dot(n, l), 0.0);
        float specular = diffuse != 0.0 ? pow(max(dot(n, h), 0.0), 50.0) : diffuse;
        rgb = vec3((0.3 * ambient_col * ambient) + light_col * ((0.6 * diffuse) + (0.3 * specular)));
    }
    
    // Crude test to see if it's averaging.
//    if (iFrame % 2 == 0) {
//        rgb = vec3(rng(vec2(iFrame, iFrame)));
//    }
    
    // Store possible mouse click
    bool moved = (iMouse / iResolution.x).z > 0.0;

    // Average over last frames
    vec3 lastRGB = texture(iChannel0, uv).xyz;
    float prev_alpha = texture(iChannel0, uv).a;
    float alpha = (prev_alpha == 0.0 || moved) ? 1.0 : prev_alpha / (prev_alpha + 1.0);
    rgb = mix(lastRGB, rgb, alpha);
    fragColor = vec4(rgb, alpha);
}



NEW BUFFB
#define PI 3.1415926535897932384626433832795028841971
#define INF 100000.0

float rho = 50.0;  // dist from world origin to eye
float theta = -PI / 2.0;
float phi = PI / 2.0;
float focus = 35.0;  // must be less than rho!
float s_width = 10.0;  // screen width, in the imaginary world (not actual screen)


// Helper functions
float rng(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// Intersection Point
struct IntersectionPoint {
    float t;
    vec3 pos;
    vec3 nor;
    bool on_light;  // true iff point lies on area-light
};

// Ray
struct Ray {
    vec3 origin;
    vec3 dir;
};



// Primitive Shapes
struct Sphere {
    float radius;
    vec3 center;
};

struct Triangle {
    vec3 verts[3];  // Oriented counter-clockwise.
    bool is_light;  // true iff it's an area-light
};


// Intersect with triangle 
IntersectionPoint intersect_triangle(Triangle tri, Ray ray) {
    // Triangle Data
    vec3 v0 = tri.verts[0];
    vec3 v1 = tri.verts[1];
    vec3 v2 = tri.verts[2];
    vec3 n = normalize(cross(v1 - v0, v2 - v0));

    // Find intersection...
    IntersectionPoint isect;
    isect.t = INF;

    // Triangle parallel with ray
    if (dot(n, ray.dir) == 0.0) {
        return isect;
    }

    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);
    // Triangle behind the origin
    if (t <= 0.0) {
        return isect;
    }

    // In-out test
    vec3 point = ray.origin + (t * ray.dir);
    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;
    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;
    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;
    if ((b0 && b1) && b2) {
        isect.t = t;
        isect.pos = point;
        isect.nor = n;
    }
    return isect;
}

// Intersect ray with sphere
IntersectionPoint intersect_sphere(Sphere s, Ray ray) {
    // Sphere data
    vec3 center = s.center;
    float radius = s.radius;

    // Find intersection point...
    IntersectionPoint point;
    point.t = INF;

    // Build quadratic
    float A = dot(ray.dir, ray.dir);
    float B = 2.0 * dot(ray.dir, ray.origin - center);
    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);
    float disc = (B * B) - (4.0 * A * C);

    // Solve quadratic
    if (disc < 0.0) {
        return point;
    }
    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));
    if (t >= 0.0) {
        point.t = t;
        point.pos = ray.origin + (t * ray.dir);
        point.nor = normalize(point.pos - center);
    }
    return point;
}


// Intersect Scene 1 — Sphere + Triangle scene
IntersectionPoint intersect_scene1(Ray ray) {
    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.
    Triangle tri;
    float halfside = 10.0 / 2.0;
    tri.verts[0] = vec3(0.0, -halfside, -halfside);
    tri.verts[1] = vec3(0.0, halfside, -halfside);
    tri.verts[2] = vec3(0.0, 0, halfside);
    
    // Sphere of radius 7 centered above triangle.
    Sphere s;
    s.center = vec3(0.0, 0.0, 9.0);
    s.radius = 7.0;
    
    // Intersect ray with both.
    IntersectionPoint isect_tri = intersect_triangle(tri, ray);
    IntersectionPoint isect_sphere = intersect_sphere(s, ray);
    
    if (isect_tri.t < isect_sphere.t) {
        return isect_tri;
    }
    
    return isect_sphere;
}


// Intersect Scene 2 — Box
IntersectionPoint intersect_scene2(Ray ray) {
    // Box parameters. It opens up on the negative y-axis. 'h' below stands for 'half'.
    float hx = 30.0 / 2.0;
    float hy = 30.0 / 2.0;
    float hz = 15.0 / 2.0;
    

    // Box will be a collection of triangles.
    // Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ))
    const int n_tris = (5 + 1) * 2;
    const float p = 0.3;  // percentage smaller area-light is compared to ceiling.
    const float dz = -0.1; // z-displacement from ceiling to area light
    Triangle tris[n_tris] = Triangle[n_tris](
        // Floor
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(hx, -hy, -hz), vec3(-hx, hy, -hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, -hz), vec3(-hx, hy, -hz), vec3(hx, -hy, -hz) ), false),
        // Back Wall
        Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, hy, -hz) ), false),
        // Left Wall
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(-hx, hy, -hz), vec3(-hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(-hx, hy, hz), vec3(-hx, -hy, hz), vec3(-hx, hy, -hz) ), false),
        // Right Wall
        Triangle(vec3[3]( vec3(hx, -hy, -hz), vec3(hx, hy, -hz), vec3(hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(hx, -hy, hz), vec3(hx, hy, -hz) ), false),
        // Ceiling
        Triangle(vec3[3]( vec3(-hx, -hy, hz), vec3(hx, -hy, hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, -hy, hz) ), false),
        
        // Area Light
        Triangle(vec3[3]( vec3(-p*hx, -p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz) ), true),
        Triangle(vec3[3]( vec3(p*hx, p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz) ), true)
        
    );
    
    // Throw in a couple of spheres too
    const float radius = 4.0;
    const int n_spheres = 2;
    Sphere spheres[n_spheres] = Sphere[n_spheres](
        Sphere(radius, vec3(0.4 * hx, -0.2 * hy, -hz + radius)),
        Sphere(radius, vec3(-0.4 * hx, 0.5 * hy, -hz + radius))
    );
    
    // Intersection Computation
    IntersectionPoint minpoint; 
    minpoint.t = INF;
    for (int i=0; i<n_tris; ++i) {
        IntersectionPoint isect = intersect_triangle(tris[i], ray);
        if (isect.t < minpoint.t) {
            minpoint = isect;
            minpoint.on_light = tris[i].is_light;
        }
    }
    for (int i=0; i<n_spheres; ++i) {
        IntersectionPoint isect = intersect_sphere(spheres[i], ray);
        if (isect.t < minpoint.t) {
            minpoint = isect;
            minpoint.on_light = false;
        }
    }
    return minpoint;
    
    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Dynamic constants
    vec2 uv = fragCoord/iResolution.xy;
    float AR = iResolution.x / iResolution.y;
    float inv_AR = 1.0 / AR;
    
    // Get camera pos (in range [-1,1]^2) from mouse
    vec2 mouseUV = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);
    theta -= mouseUV.x * 2.0;
    phi += mouseUV.y * 2.0;
    

    // Point light
    vec3 light_pos = 20.0 * vec3(0.0, -1.0, 0.0);
    vec3 light_col = vec3(1.0, 0.0, 0.0);
    vec3 ambient_col = vec3(1.0, 0.0, 0.0);

    // Set eye position and virtual screen dimensions
    vec3 eye = rho * vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    float s_height = s_width * inv_AR;
    
    // Turn uv from [0,1]^2 range to [-1,1]^2 range (with y still up)
    vec2 uv_prime = (uv * 2.0) - vec2(1.0);
    
    // Spherical unit vectors
    vec3 theta_hat = vec3(-sin(theta), cos(theta), 0);
    vec3 phi_hat = -vec3(cos(phi) * cos(theta), cos(phi) * sin(theta), -sin(phi));
    vec3 point = (eye * (focus / rho)) + ((uv_prime.x * (s_width / 2.0) * theta_hat) + (uv_prime.y * (s_height / 2.0) * phi_hat));
    
    // Light source emission value
    vec3 Le = vec3(1.0);
    
    // Primary ray (per pixel, without jittering)
    Ray r;
    r.dir = normalize(point - eye);
    r.origin = eye;
    
    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    int bounce = 0;
    while (true) {
        IntersectionPoint isect = intersect_scene2(r);
        if (isect.t != INF) {
            if (bounce == 0 && isect.on_light) {
                radiance = Le;
            }
            
            
            
            
            
            bounce += 1;
            break;
        }
        break;
    }
    
    
    
    
    
    // Crude test to see if it's averaging.
//    if (iFrame % 2 == 0) {
//        rgb = vec3(rng(vec2(iFrame, iFrame)));
//    }
    
    // Store possible mouse click
    bool moved = (iMouse / iResolution.x).z > 0.0;

    // Average over last frames
    vec3 lastRGB = texture(iChannel0, uv).xyz;
    float prev_alpha = texture(iChannel0, uv).a;
    float alpha = (prev_alpha == 0.0 || moved) ? 1.0 : prev_alpha / (prev_alpha + 1.0);
    vec3 rgb = mix(lastRGB, radiance, alpha);
    fragColor = vec4(rgb, alpha);
}



MAIN IMAGE
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    
    vec3 rgb = texture(iChannel0, uv).xyz;
    fragColor = vec4(rgb, 1.0);
}









SHADERTOY (old buffer A)

#define PI 3.1415926535897932384626433832795028841971
#define INF 100000.0

float rho = 50.0;  // dist from world origin to eye
float theta = -PI / 2.0;
float phi = PI / 2.0;
float focus = 35.0;  // must be less than rho!
float s_width = 10.0;  // screen width, in the imaginary world (not actual screen)


// Helper functions
float rng(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// Intersection Point
struct IntersectionPoint {
    float t;
    vec3 pos;
    vec3 nor;
    bool on_light;  // true iff point lies on area-light
};

// Ray
struct Ray {
    vec3 origin;
    vec3 dir;
};



// Primitive Shapes
struct Sphere {
    float radius;
    vec3 center;
};

struct Triangle {
    vec3 verts[3];  // Oriented counter-clockwise.
    bool is_light;  // true iff it's an area-light
};


// Intersect with triangle 
IntersectionPoint intersect_triangle(Triangle tri, Ray ray) {
    // Triangle Data
    vec3 v0 = tri.verts[0];
    vec3 v1 = tri.verts[1];
    vec3 v2 = tri.verts[2];
    vec3 n = normalize(cross(v1 - v0, v2 - v0));

    // Find intersection...
    IntersectionPoint isect;
    isect.t = INF;

    // Triangle parallel with ray
    if (dot(n, ray.dir) == 0.0) {
        return isect;
    }

    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);
    // Triangle behind the origin
    if (t <= 0.0) {
        return isect;
    }

    // In-out test
    vec3 point = ray.origin + (t * ray.dir);
    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;
    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;
    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;
    if ((b0 && b1) && b2) {
        isect.t = t;
        isect.pos = point;
        isect.nor = n;
    }
    return isect;
}

// Intersect ray with sphere
IntersectionPoint intersect_sphere(Sphere s, Ray ray) {
    // Sphere data
    vec3 center = s.center;
    float radius = s.radius;

    // Find intersection point...
    IntersectionPoint point;
    point.t = INF;

    // Build quadratic
    float A = dot(ray.dir, ray.dir);
    float B = 2.0 * dot(ray.dir, ray.origin - center);
    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);
    float disc = (B * B) - (4.0 * A * C);

    // Solve quadratic
    if (disc < 0.0) {
        return point;
    }
    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));
    if (t >= 0.0) {
        point.t = t;
        point.pos = ray.origin + (t * ray.dir);
        point.nor = normalize(point.pos - center);
    }
    return point;
}


// Intersect Scene 1 — Sphere + Triangle scene
IntersectionPoint intersect_scene1(Ray ray) {
    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.
    Triangle tri;
    float halfside = 10.0 / 2.0;
    tri.verts[0] = vec3(0.0, -halfside, -halfside);
    tri.verts[1] = vec3(0.0, halfside, -halfside);
    tri.verts[2] = vec3(0.0, 0, halfside);
    
    // Sphere of radius 7 centered above triangle.
    Sphere s;
    s.center = vec3(0.0, 0.0, 9.0);
    s.radius = 7.0;
    
    // Intersect ray with both.
    IntersectionPoint isect_tri = intersect_triangle(tri, ray);
    IntersectionPoint isect_sphere = intersect_sphere(s, ray);
    
    if (isect_tri.t < isect_sphere.t) {
        return isect_tri;
    }
    
    return isect_sphere;
}


// Intersect Scene 2 — Box
IntersectionPoint intersect_scene2(Ray ray) {
    // Box parameters. It opens up on the negative y-axis. 'h' below stands for 'half'.
    float hx = 30.0 / 2.0;
    float hy = 30.0 / 2.0;
    float hz = 15.0 / 2.0;
    

    // Box will be a collection of triangles.
    // Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ))
    const int n_tris = (5 + 1) * 2;
    const float p = 0.3;  // percentage smaller area-light is compared to ceiling.
    const float dz = -0.1; // z-displacement from ceiling to area light
    Triangle tris[n_tris] = Triangle[n_tris](
        // Floor
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(hx, -hy, -hz), vec3(-hx, hy, -hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, -hz), vec3(-hx, hy, -hz), vec3(hx, -hy, -hz) ), false),
        // Back Wall
        Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, hy, -hz) ), false),
        // Left Wall
        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(-hx, hy, -hz), vec3(-hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(-hx, hy, hz), vec3(-hx, -hy, hz), vec3(-hx, hy, -hz) ), false),
        // Right Wall
        Triangle(vec3[3]( vec3(hx, -hy, -hz), vec3(hx, hy, -hz), vec3(hx, -hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(hx, -hy, hz), vec3(hx, hy, -hz) ), false),
        // Ceiling
        Triangle(vec3[3]( vec3(-hx, -hy, hz), vec3(hx, -hy, hz), vec3(-hx, hy, hz) ), false),
        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, -hy, hz) ), false),
        
        // Area Light
        Triangle(vec3[3]( vec3(-p*hx, -p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz) ), true),
        Triangle(vec3[3]( vec3(p*hx, p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz) ), true)
        
    );
    
    // Throw in a couple of spheres too
    const float radius = 4.0;
    const int n_spheres = 2;
    Sphere spheres[n_spheres] = Sphere[n_spheres](
        Sphere(radius, vec3(0.4 * hx, -0.2 * hy, -hz + radius)),
        Sphere(radius, vec3(-0.4 * hx, 0.5 * hy, -hz + radius))
    );
    
    // Intersection Computation
    IntersectionPoint minpoint; 
    minpoint.t = INF;
    for (int i=0; i<n_tris; ++i) {
        IntersectionPoint isect = intersect_triangle(tris[i], ray);
        if (isect.t < minpoint.t) {
            minpoint = isect;
            minpoint.on_light = tris[i].is_light;
        }
    }
    for (int i=0; i<n_spheres; ++i) {
        IntersectionPoint isect = intersect_sphere(spheres[i], ray);
        if (isect.t < minpoint.t) {
            minpoint = isect;
            minpoint.on_light = false;
        }
    }
    return minpoint;
    
    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Dynamic constants
    vec2 uv = fragCoord/iResolution.xy;
    float AR = iResolution.x / iResolution.y;
    float inv_AR = 1.0 / AR;
    
    // Get camera pos (in range [-1,1]^2) from mouse
    vec2 mouseUV = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);
    theta -= mouseUV.x * 2.0;
    phi += mouseUV.y * 2.0;
    

    // Point light
    vec3 light_pos = 20.0 * vec3(0.0, -1.0, 0.0);
    vec3 light_col = vec3(1.0, 0.0, 0.0);
    vec3 ambient_col = vec3(1.0, 0.0, 0.0);

    // Set eye position and virtual screen dimensions
    vec3 eye = rho * vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    float s_height = s_width * inv_AR;
    
    // Turn uv from [0,1]^2 range to [-1,1]^2 range (with y still up)
    vec2 uv_prime = (uv * 2.0) - vec2(1.0);
    
    // Spherical unit vectors
    vec3 theta_hat = vec3(-sin(theta), cos(theta), 0);
    vec3 phi_hat = -vec3(cos(phi) * cos(theta), cos(phi) * sin(theta), -sin(phi));
    vec3 point = (eye * (focus / rho)) + ((uv_prime.x * (s_width / 2.0) * theta_hat) + (uv_prime.y * (s_height / 2.0) * phi_hat));
    
    // Single ray (per pixel)
    Ray r;
    r.dir = normalize(point - eye);
    r.origin = eye;
    
    IntersectionPoint isect = intersect_scene2(r);
    vec3 rgb = vec3(0.0);
    if (isect.on_light) {rgb = vec3(1.0);}
    else if (isect.t != INF) {
        vec3 l = normalize(light_pos - isect.pos);
        vec3 v = normalize(-r.dir);
        vec3 h = normalize(l + v);
        vec3 n = isect.nor;

        float ambient = 0.6;
        float diffuse = max(dot(n, l), 0.0);
        float specular = diffuse != 0.0 ? pow(max(dot(n, h), 0.0), 50.0) : diffuse;
        rgb = vec3((0.3 * ambient_col * ambient) + light_col * ((0.6 * diffuse) + (0.3 * specular)));
    }
    
    // Crude test to see if it's averaging.
//    if (iFrame % 2 == 0) {
//        rgb = vec3(rng(vec2(iFrame, iFrame)));
//    }
    
    // Store possible mouse click
    bool moved = (iMouse / iResolution.x).z > 0.0;

    // Average over last frames
    vec3 lastRGB = texture(iChannel0, uv).xyz;
    float prev_alpha = texture(iChannel0, uv).a;
    float alpha = (prev_alpha == 0.0 || moved) ? 1.0 : prev_alpha / (prev_alpha + 1.0);
    rgb = mix(lastRGB, rgb, alpha);
    fragColor = vec4(rgb, alpha);
}