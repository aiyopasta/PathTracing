{
 "ver": "0.1",
 "info": {
  "id": "dsfGDB",
  "date": "0",
  "viewed": 0,
  "name": "Path-Tracer",
  "description": "Pathtracing",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "pathtracing"
  ],
  "hasliked": 0,
  "parentid": "",
  "parentname": ""
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 rgb = texture(iChannel1, uv).xyz;\n    fragColor = vec4(rgb, 1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "#define PI 3.1415926535897932384626433832795028841971\n#define INF 100000.0\n\nfloat rho = 50.0;  // dist from world origin to eye\nfloat theta = -PI / 2.0;\nfloat phi = PI / 2.0;\nfloat focus = 35.0;  // must be less than rho!\nfloat s_width = 10.0;  // screen width, in the imaginary world (not actual screen)\n\n\n// Helper functions\nfloat rng(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Intersection Point\nstruct IntersectionPoint {\n    float t;\n    vec3 pos;\n    vec3 nor;\n    bool on_light;  // true iff point lies on area-light\n};\n\n// Ray\nstruct Ray {\n    vec3 origin;\n    vec3 dir;\n};\n\n\n\n// Primitive Shapes\nstruct Sphere {\n    float radius;\n    vec3 center;\n};\n\nstruct Triangle {\n    vec3 verts[3];  // Oriented counter-clockwise.\n    bool is_light;  // true iff it's an area-light\n};\n\n\n// Intersect with triangle \nIntersectionPoint intersect_triangle(Triangle tri, Ray ray) {\n    // Triangle Data\n    vec3 v0 = tri.verts[0];\n    vec3 v1 = tri.verts[1];\n    vec3 v2 = tri.verts[2];\n    vec3 n = normalize(cross(v1 - v0, v2 - v0));\n\n    // Find intersection...\n    IntersectionPoint isect;\n    isect.t = INF;\n\n    // Triangle parallel with ray\n    if (dot(n, ray.dir) == 0.0) {\n        return isect;\n    }\n\n    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);\n    // Triangle behind the origin\n    if (t <= 0.0) {\n        return isect;\n    }\n\n    // In-out test\n    vec3 point = ray.origin + (t * ray.dir);\n    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;\n    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;\n    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;\n    if ((b0 && b1) && b2) {\n        isect.t = t;\n        isect.pos = point;\n        isect.nor = n;\n    }\n    return isect;\n}\n\n// Intersect ray with sphere\nIntersectionPoint intersect_sphere(Sphere s, Ray ray) {\n    // Sphere data\n    vec3 center = s.center;\n    float radius = s.radius;\n\n    // Find intersection point...\n    IntersectionPoint point;\n    point.t = INF;\n\n    // Build quadratic\n    float A = dot(ray.dir, ray.dir);\n    float B = 2.0 * dot(ray.dir, ray.origin - center);\n    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);\n    float disc = (B * B) - (4.0 * A * C);\n\n    // Solve quadratic\n    if (disc < 0.0) {\n        return point;\n    }\n    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));\n    if (t >= 0.0) {\n        point.t = t;\n        point.pos = ray.origin + (t * ray.dir);\n        point.nor = normalize(point.pos - center);\n    }\n    return point;\n}\n\n\n// Intersect Scene 1 — Sphere + Triangle scene\nIntersectionPoint intersect_scene1(Ray ray) {\n    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.\n    Triangle tri;\n    float halfside = 10.0 / 2.0;\n    tri.verts[0] = vec3(0.0, -halfside, -halfside);\n    tri.verts[1] = vec3(0.0, halfside, -halfside);\n    tri.verts[2] = vec3(0.0, 0, halfside);\n    \n    // Sphere of radius 7 centered above triangle.\n    Sphere s;\n    s.center = vec3(0.0, 0.0, 9.0);\n    s.radius = 7.0;\n    \n    // Intersect ray with both.\n    IntersectionPoint isect_tri = intersect_triangle(tri, ray);\n    IntersectionPoint isect_sphere = intersect_sphere(s, ray);\n    \n    if (isect_tri.t < isect_sphere.t) {\n        return isect_tri;\n    }\n    \n    return isect_sphere;\n}\n\n\n// Intersect Scene 2 — Box\nIntersectionPoint intersect_scene2(Ray ray) {\n    // Box parameters. It opens up on the negative y-axis. 'h' below stands for 'half'.\n    float hx = 30.0 / 2.0;\n    float hy = 30.0 / 2.0;\n    float hz = 15.0 / 2.0;\n    \n\n    // Box will be a collection of triangles.\n    // Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ))\n    const int n_tris = (5 + 1) * 2;\n    const float p = 0.3;  // percentage smaller area-light is compared to ceiling.\n    const float dz = -0.1; // z-displacement from ceiling to area light\n    Triangle tris[n_tris] = Triangle[n_tris](\n        // Floor\n        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(hx, -hy, -hz), vec3(-hx, hy, -hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, -hz), vec3(-hx, hy, -hz), vec3(hx, -hy, -hz) ), false),\n        // Back Wall\n        Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, hy, -hz) ), false),\n        // Left Wall\n        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(-hx, hy, -hz), vec3(-hx, -hy, hz) ), false),\n        Triangle(vec3[3]( vec3(-hx, hy, hz), vec3(-hx, -hy, hz), vec3(-hx, hy, -hz) ), false),\n        // Right Wall\n        Triangle(vec3[3]( vec3(hx, -hy, -hz), vec3(hx, hy, -hz), vec3(hx, -hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(hx, -hy, hz), vec3(hx, hy, -hz) ), false),\n        // Ceiling\n        Triangle(vec3[3]( vec3(-hx, -hy, hz), vec3(hx, -hy, hz), vec3(-hx, hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, -hy, hz) ), false),\n        \n        // Area Light\n        Triangle(vec3[3]( vec3(-p*hx, -p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz) ), true),\n        Triangle(vec3[3]( vec3(p*hx, p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz) ), true)\n        \n    );\n    \n    // Throw in a couple of spheres too\n    const float radius = 4.0;\n    const int n_spheres = 2;\n    Sphere spheres[n_spheres] = Sphere[n_spheres](\n        Sphere(radius, vec3(0.4 * hx, -0.2 * hy, -hz + radius)),\n        Sphere(radius, vec3(-0.4 * hx, 0.5 * hy, -hz + radius))\n    );\n    \n    // Intersection Computation\n    IntersectionPoint minpoint; \n    minpoint.t = INF;\n    for (int i=0; i<n_tris; ++i) {\n        IntersectionPoint isect = intersect_triangle(tris[i], ray);\n        if (isect.t < minpoint.t) {\n            minpoint = isect;\n            minpoint.on_light = tris[i].is_light;\n        }\n    }\n    for (int i=0; i<n_spheres; ++i) {\n        IntersectionPoint isect = intersect_sphere(spheres[i], ray);\n        if (isect.t < minpoint.t) {\n            minpoint = isect;\n            minpoint.on_light = false;\n        }\n    }\n    return minpoint;\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Dynamic constants\n    vec2 uv = fragCoord/iResolution.xy;\n    float AR = iResolution.x / iResolution.y;\n    float inv_AR = 1.0 / AR;\n    \n    // Get camera pos (in range [-1,1]^2) from mouse\n    vec2 mouseUV = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);\n    theta -= mouseUV.x * 2.0;\n    phi += mouseUV.y * 2.0;\n    \n\n    // Point light\n    vec3 light_pos = 20.0 * vec3(0.0, -1.0, 0.0);\n    vec3 light_col = vec3(1.0, 0.0, 0.0);\n    vec3 ambient_col = vec3(1.0, 0.0, 0.0);\n\n    // Set eye position and virtual screen dimensions\n    vec3 eye = rho * vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));\n    float s_height = s_width * inv_AR;\n    \n    // Turn uv from [0,1]^2 range to [-1,1]^2 range (with y still up)\n    vec2 uv_prime = (uv * 2.0) - vec2(1.0);\n    \n    // Spherical unit vectors\n    vec3 theta_hat = vec3(-sin(theta), cos(theta), 0);\n    vec3 phi_hat = -vec3(cos(phi) * cos(theta), cos(phi) * sin(theta), -sin(phi));\n    vec3 point = (eye * (focus / rho)) + ((uv_prime.x * (s_width / 2.0) * theta_hat) + (uv_prime.y * (s_height / 2.0) * phi_hat));\n    \n    // Single ray (per pixel)\n    Ray r;\n    r.dir = normalize(point - eye);\n    r.origin = eye;\n    \n    IntersectionPoint isect = intersect_scene2(r);\n    vec3 rgb = vec3(0.0);\n    if (isect.on_light) {rgb = vec3(1.0);}\n    else if (isect.t != INF) {\n        vec3 l = normalize(light_pos - isect.pos);\n        vec3 v = normalize(-r.dir);\n        vec3 h = normalize(l + v);\n        vec3 n = isect.nor;\n\n        float ambient = 0.6;\n        float diffuse = max(dot(n, l), 0.0);\n        float specular = diffuse != 0.0 ? pow(max(dot(n, h), 0.0), 50.0) : diffuse;\n        rgb = vec3((0.3 * ambient_col * ambient) + light_col * ((0.6 * diffuse) + (0.3 * specular)));\n    }\n    \n    // Crude test to see if it's averaging.\n//    if (iFrame % 2 == 0) {\n//        rgb = vec3(rng(vec2(iFrame, iFrame)));\n//    }\n    \n    // Store possible mouse click\n    bool moved = (iMouse / iResolution.x).z > 0.0;\n\n    // Average over last frames\n    vec3 lastRGB = texture(iChannel0, uv).xyz;\n    float prev_alpha = texture(iChannel0, uv).a;\n    float alpha = (prev_alpha == 0.0 || moved) ? 1.0 : prev_alpha / (prev_alpha + 1.0);\n    rgb = mix(lastRGB, rgb, alpha);\n    fragColor = vec4(rgb, alpha);\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "#define PI 3.1415926535897932384626433832795028841971\n#define INF 100000.0\n\nfloat rho = 50.0;  // dist from world origin to eye\nfloat theta = -PI / 2.0;\nfloat phi = PI / 2.0;\nfloat focus = 35.0;  // must be less than rho!\nfloat s_width = 10.0;  // screen width, in the imaginary world (not actual screen)\n\n\n// Helper functions\nfloat rng(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Intersection Point\nstruct IntersectionPoint {\n    float t;\n    vec3 pos;\n    vec3 nor;\n    bool on_light;  // true iff point lies on area-light\n};\n\n// Ray\nstruct Ray {\n    vec3 origin;\n    vec3 dir;\n};\n\n\n\n// Primitive Shapes\nstruct Sphere {\n    float radius;\n    vec3 center;\n};\n\nstruct Triangle {\n    vec3 verts[3];  // Oriented counter-clockwise.\n    bool is_light;  // true iff it's an area-light\n};\n\n\n// Intersect with triangle \nIntersectionPoint intersect_triangle(Triangle tri, Ray ray) {\n    // Triangle Data\n    vec3 v0 = tri.verts[0];\n    vec3 v1 = tri.verts[1];\n    vec3 v2 = tri.verts[2];\n    vec3 n = normalize(cross(v1 - v0, v2 - v0));\n\n    // Find intersection...\n    IntersectionPoint isect;\n    isect.t = INF;\n\n    // Triangle parallel with ray\n    if (dot(n, ray.dir) == 0.0) {\n        return isect;\n    }\n\n    float t = dot(n, v0 - ray.origin) / dot(n, ray.dir);\n    // Triangle behind the origin\n    if (t <= 0.0) {\n        return isect;\n    }\n\n    // In-out test\n    vec3 point = ray.origin + (t * ray.dir);\n    bool b0 = dot(cross(v1 - v0, point - v0), n) >= 0.0;\n    bool b1 = dot(cross(v2 - v1, point - v1), n) >= 0.0;\n    bool b2 = dot(cross(v0 - v2, point - v2), n) >= 0.0;\n    if ((b0 && b1) && b2) {\n        isect.t = t;\n        isect.pos = point;\n        isect.nor = n;\n    }\n    return isect;\n}\n\n// Intersect ray with sphere\nIntersectionPoint intersect_sphere(Sphere s, Ray ray) {\n    // Sphere data\n    vec3 center = s.center;\n    float radius = s.radius;\n\n    // Find intersection point...\n    IntersectionPoint point;\n    point.t = INF;\n\n    // Build quadratic\n    float A = dot(ray.dir, ray.dir);\n    float B = 2.0 * dot(ray.dir, ray.origin - center);\n    float C = dot(ray.origin - center, ray.origin - center) - (radius * radius);\n    float disc = (B * B) - (4.0 * A * C);\n\n    // Solve quadratic\n    if (disc < 0.0) {\n        return point;\n    }\n    float t = min((-B + sqrt(disc)) / (2.0 * A), (-B - sqrt(disc)) / (2.0 * A));\n    if (t >= 0.0) {\n        point.t = t;\n        point.pos = ray.origin + (t * ray.dir);\n        point.nor = normalize(point.pos - center);\n    }\n    return point;\n}\n\n\n// Intersect Scene 1 — Sphere + Triangle scene\nIntersectionPoint intersect_scene1(Ray ray) {\n    // Equilateral triangle with side 10, centered at origin & parallel to yz plane.\n    Triangle tri;\n    float halfside = 10.0 / 2.0;\n    tri.verts[0] = vec3(0.0, -halfside, -halfside);\n    tri.verts[1] = vec3(0.0, halfside, -halfside);\n    tri.verts[2] = vec3(0.0, 0, halfside);\n    \n    // Sphere of radius 7 centered above triangle.\n    Sphere s;\n    s.center = vec3(0.0, 0.0, 9.0);\n    s.radius = 7.0;\n    \n    // Intersect ray with both.\n    IntersectionPoint isect_tri = intersect_triangle(tri, ray);\n    IntersectionPoint isect_sphere = intersect_sphere(s, ray);\n    \n    if (isect_tri.t < isect_sphere.t) {\n        return isect_tri;\n    }\n    \n    return isect_sphere;\n}\n\n\n// Intersect Scene 2 — Box\nIntersectionPoint intersect_scene2(Ray ray) {\n    // Box parameters. It opens up on the negative y-axis. 'h' below stands for 'half'.\n    float hx = 30.0 / 2.0;\n    float hy = 30.0 / 2.0;\n    float hz = 15.0 / 2.0;\n    \n\n    // Box will be a collection of triangles.\n    // Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ))\n    const int n_tris = (5 + 1) * 2;\n    const float p = 0.3;  // percentage smaller area-light is compared to ceiling.\n    const float dz = -0.1; // z-displacement from ceiling to area light\n    Triangle tris[n_tris] = Triangle[n_tris](\n        // Floor\n        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(hx, -hy, -hz), vec3(-hx, hy, -hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, -hz), vec3(-hx, hy, -hz), vec3(hx, -hy, -hz) ), false),\n        // Back Wall\n        Triangle(vec3[3]( vec3(-hx, hy, -hz), vec3(hx, hy, -hz), vec3(-hx, hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, hy, -hz) ), false),\n        // Left Wall\n        Triangle(vec3[3]( vec3(-hx, -hy, -hz), vec3(-hx, hy, -hz), vec3(-hx, -hy, hz) ), false),\n        Triangle(vec3[3]( vec3(-hx, hy, hz), vec3(-hx, -hy, hz), vec3(-hx, hy, -hz) ), false),\n        // Right Wall\n        Triangle(vec3[3]( vec3(hx, -hy, -hz), vec3(hx, hy, -hz), vec3(hx, -hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(hx, -hy, hz), vec3(hx, hy, -hz) ), false),\n        // Ceiling\n        Triangle(vec3[3]( vec3(-hx, -hy, hz), vec3(hx, -hy, hz), vec3(-hx, hy, hz) ), false),\n        Triangle(vec3[3]( vec3(hx, hy, hz), vec3(-hx, hy, hz), vec3(hx, -hy, hz) ), false),\n        \n        // Area Light\n        Triangle(vec3[3]( vec3(-p*hx, -p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz) ), true),\n        Triangle(vec3[3]( vec3(p*hx, p*hy, hz+dz), vec3(-p*hx, p*hy, hz+dz), vec3(p*hx, -p*hy, hz+dz) ), true)\n        \n    );\n    \n    // Throw in a couple of spheres too\n    const float radius = 4.0;\n    const int n_spheres = 2;\n    Sphere spheres[n_spheres] = Sphere[n_spheres](\n        Sphere(radius, vec3(0.4 * hx, -0.2 * hy, -hz + radius)),\n        Sphere(radius, vec3(-0.4 * hx, 0.5 * hy, -hz + radius))\n    );\n    \n    // Intersection Computation\n    IntersectionPoint minpoint; \n    minpoint.t = INF;\n    for (int i=0; i<n_tris; ++i) {\n        IntersectionPoint isect = intersect_triangle(tris[i], ray);\n        if (isect.t < minpoint.t) {\n            minpoint = isect;\n            minpoint.on_light = tris[i].is_light;\n        }\n    }\n    for (int i=0; i<n_spheres; ++i) {\n        IntersectionPoint isect = intersect_sphere(spheres[i], ray);\n        if (isect.t < minpoint.t) {\n            minpoint = isect;\n            minpoint.on_light = false;\n        }\n    }\n    return minpoint;\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Dynamic constants\n    vec2 uv = fragCoord/iResolution.xy;\n    float AR = iResolution.x / iResolution.y;\n    float inv_AR = 1.0 / AR;\n    \n    // Get camera pos (in range [-1,1]^2) from mouse\n    vec2 mouseUV = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);\n    theta -= mouseUV.x * 2.0;\n    phi += mouseUV.y * 2.0;\n    \n\n    // Point light\n    vec3 light_pos = 20.0 * vec3(0.0, -1.0, 0.0);\n    vec3 light_col = vec3(1.0, 0.0, 0.0);\n    vec3 ambient_col = vec3(1.0, 0.0, 0.0);\n\n    // Set eye position and virtual screen dimensions\n    vec3 eye = rho * vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));\n    float s_height = s_width * inv_AR;\n    \n    // Turn uv from [0,1]^2 range to [-1,1]^2 range (with y still up)\n    vec2 uv_prime = (uv * 2.0) - vec2(1.0);\n    \n    // Spherical unit vectors\n    vec3 theta_hat = vec3(-sin(theta), cos(theta), 0);\n    vec3 phi_hat = -vec3(cos(phi) * cos(theta), cos(phi) * sin(theta), -sin(phi));\n    vec3 point = (eye * (focus / rho)) + ((uv_prime.x * (s_width / 2.0) * theta_hat) + (uv_prime.y * (s_height / 2.0) * phi_hat));\n    \n    // Light source emission value\n    vec3 Le = vec3(1.0);\n    \n    // Primary ray (per pixel, without jittering)\n    Ray r;\n    r.dir = normalize(point - eye);\n    r.origin = eye;\n    \n    vec3 radiance = vec3(0.0);\n    vec3 throughput = vec3(1.0);\n    int bounce = 0;\n    while (true) {\n        IntersectionPoint isect = intersect_scene2(r);\n        if (isect.t != INF) {\n            if (bounce == 0 && isect.on_light) {\n                radiance = Le;\n            }\n            \n            \n            \n            \n            \n            bounce += 1;\n            continue;\n        }\n        break;\n    }\n    \n    \n    \n    \n    \n    // Crude test to see if it's averaging.\n//    if (iFrame % 2 == 0) {\n//        rgb = vec3(rng(vec2(iFrame, iFrame)));\n//    }\n    \n    // Store possible mouse click\n    bool moved = (iMouse / iResolution.x).z > 0.0;\n\n    // Average over last frames\n    vec3 lastRGB = texture(iChannel0, uv).xyz;\n    float prev_alpha = texture(iChannel0, uv).a;\n    float alpha = (prev_alpha == 0.0 || moved) ? 1.0 : prev_alpha / (prev_alpha + 1.0);\n    vec3 rgb = mix(lastRGB, radiance, alpha);\n    fragColor = vec4(rgb, alpha);\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}